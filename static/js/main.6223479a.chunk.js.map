{"version":3,"sources":["registerServiceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","constants.js","containers/App.js","action.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","Card","title","completed","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","ErrorBoundry","props","hasError","info","this","setState","children","Component","Scroll","style","overflow","border","height","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","filterRobots","isPending","filter","toLowerCase","includes","length","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6223479a.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\n\nconst Card = ({title, completed, id}) => {\n\treturn (\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw1 shadow-5'>\n\t\t\t<img src ={`https://robohash.org/${id}?100x100`} alt='robots' />\n\t\t\t<div>\n\t\t\t\t<h2>{title}</h2>\n\t\t\t    <p>{completed}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\tconst CardList = ( { robots }) => {\r\n\t\t// if (true) {\r\n\t\t// \tthrow new Error ('Nooooooo!');\r\n\t\t// }\r\n\t\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\t\ttitle={robots[i].title}\r\n\t\t\t\t\t\t\tcompleted={robots[i].completed} />\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search friends'\r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t if(this.state.hasError) {\r\n\t\t return <h1>Ooops. Problematic</h1>\r\n\t }\r\n\t return this.props.children\r\n\t}\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\n\nconst Scroll = (props) => {\n\t//console.log(props);\n\treturn (\n\t\t<div style = {{overflow:'scroll', border:'1px solid black', height:'590px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;\n\n\n","\r\n// eslint-disable-next-line\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n//import {robots} from './robots';\r\nimport { connect } from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Scroll from '../components/Scroll'\r\n\r\nimport { setSearchField, requestRobots } from '../action'\r\n// use a predefined keyword like 'mapStateToProps' and assign searchField and its state.\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n// MapDispatchToProps uses dispatch to provide SearchChange Event and this will call the value need.\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\t// Request Robots reducers with action as dispatch\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n//App class extends the component which calls the super\r\nclass App extends Component {\r\n\t// constructor() {\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: []\r\n\t// \t\t//\tsearchField:''\r\n\t// \t}\r\n\t// \t//\tconsole.log('constructor');\r\n\t// }\r\n\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\t//console.log(this.props.store.getState())\r\n\t\t//\tconsole.log('check');\r\n\t\tthis.props.onRequestRobots();\r\n\t\t//Async request from API and setting to the state called robots\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/albums')\r\n\t\t// \t.then(response => response.json())\r\n\t\t// \t.then(albums => this.setState({ robots: albums }));\r\n\r\n\t\t//console.log('componentDidMount');\r\n\t}\r\n\r\n\trender() {\r\n\t\t//const { robots } = this.state;\r\n\t\t// eslint-disable-next-line\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filterRobots = robots.filter(robots => {\r\n\t\t\treturn robots.title.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn (!robots.length) ?\r\n\t\t\t<h1>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className=\"f2\">Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filterRobots} />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n\t// eslint-disable-next-line\r\n\tCHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\n// eslint-disable-next-line\r\nexport const setSearchField = (text) => ({\r\n\ttype: 'CHANGE_SEARCH_FIELD',\r\n\tpayload: text\r\n\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/albums')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: 'error' }))\r\n}","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ' '\r\n}\r\n\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots:[],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\nswitch(action.type) {\r\n\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({}, state, { isPending: true })\r\n\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\tdefault:\r\n\t\treturn state;\r\n}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux';\r\n//import Card from './Card';\r\n//import CardList from './CardList';\r\n// import creatstore & middleware application from redux\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\n//create a logger using redux-logger\r\nimport { createLogger } from 'redux-logger';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n// Reducer requests robots\r\n// Importing tachyons CSS kit for working\r\nimport 'tachyons';\r\n//import {robots} from './robots';\r\n\r\nimport App from './containers/App';\r\n\r\n//getting searchrobots module from reducers file\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\n\r\n//Thunk middleware from redux thunk file\r\nimport thunkMiddleware from 'redux-thunk';\r\n// middleware logger\r\nconst logger = createLogger();\r\n\r\n// combined reducers const file\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\n\r\n//use createStore as object name with searchRobots & middleware as the parameters\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>\r\n\t\t, document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\n"],"sourceRoot":""}